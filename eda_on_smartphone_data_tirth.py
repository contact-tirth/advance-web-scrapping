# -*- coding: utf-8 -*-
"""eda-on-smartphone-data-tirth.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AbEHiR4aPWFvmxt_deArhMDtrWRPUmNi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# del df
df = pd.read_csv('/content/Cleaned_Mobile_Dataset.csv')

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

df.drop(columns='Unnamed: 0',inplace=True)

df.sample(5)

df.shape

df.info()

"""### Conclusions

**Phone Brand**
  - More than 98% sold by Samsung.
  - No Missing Values

**Price**
  - It skwed lil bit.
  - Not much outliers.
  - No null value.

**Phone Score**
  - All Looks Good
  - No Outliers
  - Only issue is missing values. Need generate based on some dictionary.

**Is 5G**
  - Around 27% is only having 5G

**Processor_Brand**
  - No NULL
  - Otherwise distribution is good.

**Core Name**
  - No NULL
  - More than 80% is Octa Core

**Display Speed/Refresh Rate**
  - Most looks good.
  - But having NULL values.
"""

#Phone Brand Column
df['Phone_Brand'].value_counts().plot(kind='bar')

df['Phone_Brand'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['Phone_Brand'].isna().sum()

#Phone Name
df = df.drop_duplicates('Phone_Name', keep='first')

df[df['Phone_Name'].duplicated()]

df['Phone_Brand'].nunique()

"""####PRICE"""

df['Price'].describe()

df.loc[df['Phone_Name']=='Samsung Galaxy Xcover 7 Pro','Price'] = 27208
df.loc[df['Phone_Name']=='Samsung Galaxy Z Fold 7','Price'] = 169990

df['Price'].skew()

sns.displot(kind='hist',data=df,x='Price')

df['Price'].plot(kind='box')

sns.boxenplot(df['Price'])

df[df['Price']>150000]

df['Price'].isnull().sum()

"""####Phone Score"""

df['Phone_Score'].describe()

#Replacing Phone Score 0 to NaN so we can predict later.
df.loc[df['Phone_Score']==0,'Phone_Score'] = np.nan

df['Phone_Score'].isna().sum()

sns.displot(kind='hist',data=df,x='Phone_Score')

df['Phone_Score'].skew()

df['Phone_Score'].plot(kind='box')

df['Is 5G'] = df['Phone_Name'].apply(lambda x : True if '5G' in x else False)

"""#### Id 5G Column"""

df['Is 5G'].value_counts().plot(kind='bar')

df['Is 5G'].value_counts().plot(kind='pie',autopct='%0.01f%%')

"""####Processor_Brand"""

df.drop(313,inplace=True)

df['Processor_Brand'].value_counts().plot(kind='bar')

df['Processor_Brand'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['Processor_Brand'].isnull().sum()

"""####Core Name"""

df['Core_Name'].value_counts().plot(kind='bar')

df['Core_Name'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['Core_Name'].isnull().sum()

"""####Fast Charging"""

df['Battery_Speed'].value_counts().plot(kind='bar')

df['Battery_Speed'].isnull().sum()

df['Battery_Speed'].value_counts().plot(kind='pie',autopct='%0.1f%%')

"""####RAM Capcity"""

df['Ram_Capacity'].describe()

df['Ram_Capacity'].skew()

df['Ram_Capacity'].plot(kind='box')

df['Ram_Capacity'].plot(kind='hist')

df['Ram_Capacity'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['Ram_Capacity'].isnull().sum()

"""####Display_Speed"""

df.loc[df['Display_Speed']==0,'Display_Speed'] = np.nan

df['Display_Speed'].describe()

df['Ram_Capacity'].plot(kind='box')

df['Ram_Capacity'].skew()

df['Ram_Capacity'].plot(kind='hist')

df['Display_Speed'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['Display_Speed'].isnull().sum()

df['Display_Speed'].describe()

"""####No Of Cameras"""

df.info()

df[df['No_Of_Back_Camera']+df['No_Of_Front_Camera']==8]

(df['No_Of_Back_Camera']+df['No_Of_Front_Camera']).describe()

(df['No_Of_Back_Camera']+df['No_Of_Front_Camera']).skew()

(df['No_Of_Back_Camera']+df['No_Of_Front_Camera']).value_counts().plot(kind='kde')

(df['No_Of_Back_Camera']+df['No_Of_Front_Camera']).value_counts().plot(kind='pie',autopct='%0.1f%%')

(df['No_Of_Back_Camera']+df['No_Of_Front_Camera']).isnull().sum()

"""####Operating System"""

df.loc[df['OS_Info']=='No Info Available','OS_Info'] = np.nan

df['OS_Version'] = df['OS_Info'].str.split(' ').str.get(1).str.replace(',','')

df.loc[df[df['OS_Version'].isin(['v6.0','v7.0','v8.1','v5.1','v12L','v5.1.1','v7.1.1','v6.0.1','v4.3','v7.1'])].index,'OS_Version']='Other'

df['OS_Version'].value_counts()

df['OS_Version'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df.drop(274,inplace=True)

"""####USB Type"""

df.loc[290,'USB_Type']='USB Type-C Port'

df['USB_Type'].value_counts()

df['USB_Type'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['USB_Type'].isna().sum()

"""####Display_Size_Inches"""

df['Display_Size_Inches'].describe()

df['Display_Size_Inches'].plot(kind='hist')

df['Display_Size_Inches'].plot(kind='box')

df['Display_Size_Inches'].skew()

df['Display_Size_Inches'].isna().sum()

df[df['Display_Size_Inches']<5]

"""####Upgradable"""

df['Upgradable'].value_counts().plot(kind='pie',autopct='%0.1f%%')

"""####Battery_Size"""

df['Battery_Size'].describe()

sns.displot(kind='hist',data=df,x='Battery_Size')

df['Battery_Size'].plot(kind='box')

df['Battery_Size'].skew()

df['Battery_Size'].isna().sum()

def find_display(num):
  x = ''
  if isinstance(num, str):
    if 'FHD' in num:
      return 'FHD'
    elif 'QHD' in num:
      return 'QHD'
    elif 'HD' in num:
      return 'HD'
    elif ('1812' in num) or ('1768' in num) or ('1856' in num):
      return 'FHD'
  return 'Other'

df['Display_Meassure'] = df['Display_Quality'].apply(find_display)

df['Display_Meassure'].value_counts()

df['Display_Meassure'].isna().sum()

df['Display_Meassure'].value_counts().plot(kind='pie',autopct='%0.1f%%')

"""####Primary Front And Back Camera"""

df.sample()

df['Back_Primary_Lens_MP'].describe()

sns.displot(kind='hist',data=df,x='Back_Primary_Lens_MP')

sns.catplot(kind='box',data=df,x='Back_Primary_Lens_MP')

df['Back_Primary_Lens_MP'].isna().sum()

df['Back_Primary_Lens_MP'].skew()

df['Front_Primary_Lens_MP'].describe()

sns.displot(kind='hist',data=df,x='Front_Primary_Lens_MP')

sns.catplot(kind='box',data=df,x='Front_Primary_Lens_MP')

df['Front_Primary_Lens_MP'].skew()

df['Front_Primary_Lens_MP'].isna().sum()

"""# Bi Variant Analysis"""

#Relation Between Price and USB Type
plt.figure()
sns.barplot(data=df,x='Battery_Speed',y='Price')
plt.xticks(rotation='vertical')
plt.plot()

#Relation Between Price and Battery Size
plt.figure(figsize=(15,8))
sns.barplot(data=df,x='Battery_Size',y='Price')
plt.xticks(rotation='vertical')
plt.plot()

#Relation Between Phone Score and Price
sns.scatterplot(data=df,x='Phone_Score',y='Price')

#Relation Between Phone Score and Processor_Brand
sns.barplot(data=df,x='Processor_Brand',y='Price')

sns.pointplot(data=df,x='Processor_Brand',y='Price')

#Relation Between Phone Score and Display_Size_Inches
sns.lineplot(data=df,x='Display_Size_Inches',y='Price')

#Relation Between Phone Score and Display_Meassure
sns.barplot(data=df,x='Display_Meassure',y='Price')

#Relation Between Phone Score and Core_Name
sns.barplot(data=df,x='Core_Name',y='Price')

pd.crosstab(df['Core_Name'],df['Processor_Brand'])

#Relation Between Phone Score and Ram_Capacity
sns.barplot(data=df,x='Ram_Capacity',y='Price')

sns.lineplot(data=df,x='Ram_Capacity',y='Price')

#Relation Between Phone Score and No Of Camera
df['Total_Cameras'] = df['No_Of_Back_Camera'] + df['No_Of_Front_Camera']

sns.lineplot(data=df, x='Total_Cameras', y='Price')

#Relation Between Phone Score and Is 5G
sns.barplot(data=df,x='Is 5G',y='Price')

sns.lineplot(data=df, x='Battery_Speed', y='Price')
plt.xticks(rotation='vertical')
plt.plot()

#Relation Between Phone Score and Display_Speed
sns.barplot(data=df,x='Display_Speed',y='Price')

#Relation Between Phone Score and Back_Primary_Lens_MP
sns.lineplot(data=df, x='Back_Primary_Lens_MP', y='Price')
plt.xticks(rotation='vertical')
plt.plot()

df[((df['Back_Primary_Lens_MP']<25) & (df['Price']>50000))]

df.sample()

df_numeric = df.select_dtypes(include='number')
df_numeric.corr()['Price']
# sns.heatmap(df_numeric.corr())

x_df = df.select_dtypes(include=['int64','float64']).drop(columns='Price')

x_df.sample(5)

from sklearn.impute import KNNImputer

imputer = KNNImputer(n_neighbors=5)

x_df_values = imputer.fit_transform(x_df)

x_df = pd.DataFrame(x_df_values,columns=x_df.columns)

x_df.sample(5)

x_df['Price'] = df['Price']

a = df_numeric.corr()['Price'].reset_index()

b = x_df.corr()['Price'].reset_index()

b

b.merge(a,on='index')

df.isnull().sum()

pd.get_dummies(df,columns=['Processor_Brand'],drop_first=True).sample(5)

df[df['index']==152]